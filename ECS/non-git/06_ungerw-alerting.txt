Description: >
    This template deploys cloudwatch alarms for the ecs cluster
#  by wolfgang unger 9.3.2018 - based on official amazon stacks

######################################################################################
#  Metadata 
######################################################################################
Metadata:
    AWS::CloudFormation::Interface: 
        ParameterGroups:
        - 
            Label:
                default: "Network Configuration"
            Parameters:
            - NetworkStack
            - OutsideAccess
            - CertificateArn
            - PublicHostedZoneName

        - 
            Label: 
                default: "Base ECS Configuration"
            Parameters:
            - InstanceType 
            - AmiName
            - AmiId
            - InstanceCountInitial
            - InstanceCountMin
            - InstanceCountMax
            - KeyName
           
        - 
            Label: 
                default: "SpotInstance Usage"
            Parameters: 
            - SpotInstance
            - SpotInstancePrice
          
        - 
            Label:
                default: "Tags"
            Parameters:
            - StackPrefix
            - TagName
            - TagOwner
            - TagCostCenter
            - TagEnvironmentClass
            - TagApplication
            - TagTier
            
        -
            Label:
                default: "[Optional] CodePipeline Params"
            Parameters:
            - PipelineAccount
            - PipelineStackName
      
######################################################################################
#  Parameter
######################################################################################    
Parameters:
    # NETWORK CONFIGURATION
    NetworkStack:
        Type: String
        Description: ECS network stack name
        Default: base-network
      
    OutsideAccess:
        Type: String
        Description: >
            Enable default access from outside (0.0.0.0/0) - doesn't apply for
            dev, int or sandbox, only for prod)
        Default: false
        AllowedValues: [true, false]
      
    CertificateArn:
        Type: String
        Description: >
            [Optional] When certificate ARN is provided, 443 listener is created on ALB
            
    PublicHostedZoneName:
        Type: String
        Description: '[Optional] Name of the Route53 Public Hosted Zone (without the dot in the end)'
      
    # SERVER CONFIGURATION
    InstanceType:
        Type: String
        Description: Instance type
        Default: t2.medium
        AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, 
          m1.small, m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, 
          m2.4xlarge, m3.medium, m3.large, m3.xlarge, m3.2xlarge, m4.large, 
          m4.xlarge, m4.2xlarge, m4.4xlarge]
        ConstraintDescription: must be a valid EC2 instance type.
      
    AmiName:
        Type: String
        Description: An AMI name (can include * as wildcard)
        Default: amzn-ami-*-amazon-ecs-optimized
      
    AmiId:
        Type: String
        Description: AMI image to be used
          
    KeyName:
        Type: String
        Description: The EC2 Key Pair to allow SSH access to the instances
          
    InstanceCountInitial:
        Type: Number
        Description: Desired instance count (0-30)
        Default: '2'
        MaxValue: '30'
        MinValue: '0'
    
    InstanceCountMax:
        Type: Number
        Description: Maximum instance count (0-30)
        Default: '6'
        MaxValue: '30'
        MinValue: '0'
      
    InstanceCountMin:
        Type: Number
        Description: Minimum instance count (0-30)
        Default: '2'
        MaxValue: '30'
        MinValue: '0'
        
    # Spot Pricing
    SpotInstance:
        Description: Do you want to deploy SpotInstances (only for DEV and INT Enviroment)
        Type: String
        Default: false
        AllowedValues: 
            - true
            - false

    SpotInstancePrice:
        Description: Please enter your upper price limit of your EC2 Instance
        Type: Number
  
    #Tag Configuration
    StackPrefix:
        Type: String
        Description: Name prefix for the templates which gets deployed by CodePipeline
        Default: base-ecs
    
    TagName:
        Type: String
        Description: Environment name
        Default: ecs

    TagEnvironmentClass:
        Type: String
        Description: Environment class
        Default: dev
        AllowedValues: [dev, int, prod, sandbox]

    TagOwner:
        Type: String
        Description: Resource owner
        Default: stefan.killian@man.eu

    TagCostCenter:
        Type: String
        Description: Resource cost center
        Default: "-"

    TagApplication:
        Type: String
        Description: Application name
        Default: EfficientSalesMan

    TagTier:
        Type: String
        Description: Resource tier
        Default: base
        AllowedValues: [public, internal, base, gov]
    
 
######################################################################################
#  Resources
######################################################################################    
Resources:

    
    # AUTOSCALING
    EcsAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn:
          - LogGroup1
          - LogGroup2
          - LogGroup3
          - LogGroup4
          - LogGroup5
          - LogGroup6
          - LogGroup7
          - LogGroup8
          - LogGroup9
          - LogGroup10
        CreationPolicy:
            ResourceSignal:
                Count: 2
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: 1
                MinInstancesInService: !If
                - ConditionSpotInstance
                - 0
                - !Ref InstanceCountMin
                MinSuccessfulInstancesPercent: 50
                PauseTime: PT15M
                WaitOnResourceSignals: true
        Properties:
            VPCZoneIdentifier:
            - !ImportValue
              Fn::Sub: ${NetworkStack}-private-subnet-1
            - !ImportValue
              Fn::Sub: ${NetworkStack}-private-subnet-2
            - !ImportValue
              Fn::Sub: ${NetworkStack}-private-subnet-3
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref InstanceCountMin
            MaxSize: !Ref InstanceCountMax
            DesiredCapacity: !Ref InstanceCountInitial
            TerminationPolicies: 
            - OldestInstance
            #HealthCheckType: ELB
            #HealthCheckGracePeriod: 300
            NotificationConfigurations:
            - TopicARN: !Ref EcsAutoScalingSnsTopic
              NotificationTypes:
              - autoscaling:EC2_INSTANCE_LAUNCH
              - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
              - autoscaling:EC2_INSTANCE_TERMINATE
              - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}
                PropagateAtLaunch: true
              - Key: EnvironmentClass
                Value: !Sub ${TagEnvironmentClass}
                PropagateAtLaunch: true
              - Key: Owner
                Value: !Sub ${TagOwner}
                PropagateAtLaunch: true
              - Key: CostCenter
                Value: !Sub ${TagCostCenter}
                PropagateAtLaunch: true
              - Key: Application
                Value: !Sub ${TagApplication}
                PropagateAtLaunch: true
              - Key: Tier
                Value: !Sub ${TagTier}
                PropagateAtLaunch: true
              - Key: Patch Group
                Value: ECS
                PropagateAtLaunch: true

    EcsScaleOutPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AutoScalingGroupName: !Ref EcsAutoScalingGroup
            AdjustmentType: ChangeInCapacity
            Cooldown: 300
            PolicyType: SimpleScaling
            ScalingAdjustment: 1
            
    EcsScaleInPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AutoScalingGroupName: !Ref EcsAutoScalingGroup
            AdjustmentType: ChangeInCapacity
            Cooldown: 300
            PolicyType: SimpleScaling
            ScalingAdjustment: -1

    # AUTOSCALING SNS TOPIC            
    EcsAutoScalingSnsTopic:
        Type: AWS::SNS::Topic
        Properties: 
            TopicName: !Sub ${StackPrefix}-sns
                    
    # ECS CLUSTER IAM ROLE        
    EcsClusterRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${StackPrefix}.${AWS::Region}.ECS
            Path: /services/
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Action: sts:AssumeRole
                  Effect: Allow
                  Principal:
                    Service: ec2.amazonaws.com
                    
            Policies:
            -
                PolicyName: !Sub ${StackPrefix}-ecs-policy
                PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      -
                        Effect: Allow
                        Action:
                          - ecs:CreateCluster
                          - ecs:DeregisterContainerInstance
                          - ecs:DiscoverPollEndpoint
                          - ecs:ListServices
                          - ecs:DescribeServices
                          - ecs:Poll
                          - ecs:RegisterContainerInstance
                          - ecs:StartTelemetrySession
                          - ecs:Submit*
                          - logs:CreateLogStream
                          - logs:CreateLogGroup
                          - logs:PutLogEvents
                          - logs:DescribeLogStreams
                          - logs:PutRetentionPolicy
                          - ecr:GetAuthorizationToken
                          - ecr:GetDownloadUrlForLayer
                          - ecr:BatchGetImage
                          - ecr:BatchCheckLayerAvailability
                          - cloudwatch:PutMetricData
                          - cloudwatch:GetMetricStatistics
                          - cloudwatch:ListMetrics
                          - ssm:DescribeParameters
                        Resource: '*'
                      - 
                        Effect: Allow
                        Action:
                          - cloudformation:DescribeStackResource
                          - cloudformation:SignalResource
                        Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
                      -
                        Effect: Allow
                        Action:
                          - ssm:GetParameters
                          - ssm:GetParameter
                        Resource: 
                          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*
                          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/globals/*
                                                         
    # ECS CLUSTER INSTANCE PROFILE          
    EcsClusterEC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: !Sub ${StackPrefix}.${AWS::Region}.ECS
            Path: /services/
            Roles:
            - !Ref EcsClusterRole              

  
    # ECS INSTANCES LAUNCH CONFIGURATION
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    install:
                    - install_cfn
                install_cfn:
                    services:
                        cfn-hup:
                            enabled: true
                            ensureRunning: true
                            files:
                            - /etc/cfn/cfn-hup.conf
                            - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Properties:
            AssociatePublicIpAddress: false
            SpotPrice: !If
            - ConditionSpotInstance
            - !Ref SpotInstancePrice
            - !Ref AWS::NoValue
            BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                DeleteOnTermination: true
                VolumeSize: 30
                VolumeType: gp2
            - DeviceName: /dev/xvdcz
              Ebs:
                DeleteOnTermination: true
                VolumeSize: 100
                VolumeType: gp2
                Encrypted: true
            IamInstanceProfile: !Ref EcsClusterEC2InstanceProfile
            InstanceType: !Ref InstanceType
            ImageId: !If
            - SearchCurrentAmiId
            - !Ref FindAmiCustomResource
            - !Ref AmiId
            KeyName: !If
            - UseKeyPair
            - !Ref KeyName
            - !Ref AWS::NoValue
            SecurityGroups: 
            - !Ref SecurityGroupInstances2ALBs
            UserData: 
                # LAUNCHCONFIGURATIONUSERDATASTART
                Fn::Base64: !Sub |
                    Content-Type: multipart/mixed; boundary="==BOUNDARY=="
                    MIME-Version: 1.0
                    
                    
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/upstart-job; charset="us-ascii"
                    
                    #upstart-job
                    description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
                    author "Amazon Web Services"
                    start on started ecs
                    
                    script
                      exec 2>>/var/log/ecs/cloudwatch-logs-start.log
                      set -x
                      
                      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-introspection.html
                      # Sometimes this job gets run too soon for the metadata to be available
                      until curl -s http://localhost:51678/v1/metadata
                      do
                        sleep 1
                      done
                    
                      # Grab the cluster and container instance ARN from container instance metadata
                      cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
                      container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )
                    
                      # Replace the cluster name and container instance ID placeholders with the actual values
                      sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
                      sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf
                    
                      service awslogs start
                      chkconfig awslogs on
                    end script
                    
                    
                    # Install awslogs and the jq JSON parser etc, enable automatic security updates
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash
                    set -xeu
                    
                    yum -y install awslogs jq aws-cfn-bootstrap ecs-init
                    yum -y upgrade --security
                    
                    service docker status || service docker start
                    usermod -a -G docker ec2-user
                    echo "0 * * * * yum update --security" > /var/spool/cron/root
                    
                    
                    # Configuration for AWS CLI
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/usr/bin/env bash
                    set -xeu
                    mkdir -p /etc/ecs
                    echo "ECS_CLUSTER=${Cluster}">> /etc/ecs/ecs.config
                    sed -i -e "s/region = us-east-1/region = ${AWS::Region}/g" /etc/awslogs/awscli.conf
                    
                    
                    # Configuration for AWS Logs
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash
                    set -xeu
                    # Inject the CloudWatch Logs configuration file contents
                    cat > /etc/awslogs/awslogs.conf <<- EOF
                    [general]
                    state_file = /var/lib/awslogs/agent-state
                    
                    [/var/log/dmesg]
                    file = /var/log/dmesg
                    log_group_name = /ecs/${StackPrefix}/var/log/dmesg
                    log_stream_name = {cluster}/{container_instance_id}
                    
                    [/var/log/messages]
                    file = /var/log/messages
                    log_group_name = /ecs/${StackPrefix}/var/log/messages
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %b %d %H:%M:%S
                    
                    [/var/log/docker]
                    file = /var/log/docker
                    log_group_name = /ecs/${StackPrefix}/var/log/docker
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%S.%f
                    
                    [/var/log/ecs/ecs-init.log]
                    file = /var/log/ecs/ecs-init.log*
                    log_group_name = /ecs/${StackPrefix}/var/log/ecs/ecs-init.log
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    
                    [/var/log/ecs/ecs-agent.log]
                    file = /var/log/ecs/ecs-agent.log*
                    log_group_name = /ecs/${StackPrefix}/var/log/ecs/ecs-agent.log
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    
                    [/var/log/ecs/audit.log]
                    file = /var/log/ecs/audit.log*
                    log_group_name = /ecs/${StackPrefix}/var/log/ecs/audit.log
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    
                    [/var/log/cloud-init.log]
                    file = /var/log/cloud-init.log*
                    log_group_name = /ecs/${StackPrefix}/var/log/cloud-init.log
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    
                    [/var/log/cloud-init-output.log]
                    file = /var/log/cloud-init-output.log*
                    log_group_name = /ecs/${StackPrefix}/var/log/cloud-init-output.log
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    
                    [/var/log/cfn-init-cmd.log]
                    file = /var/log/cfn-init-cmd.log*
                    log_group_name = /ecs/${StackPrefix}/var/log/cfn-init-cmd.log
                    log_stream_name = {cluster}/{container_instance_id}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    EOF

                    
                    # Script to send disk capacity/utilization info for root volume
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash
                    set -xeu
                    yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https unzip perl-Digest-SHA.x86_64
                    
                    cd /home/ec2-user
                    curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
                    unzip CloudWatchMonitoringScripts-1.2.2.zip
                    rm -rf CloudWatchMonitoringScripts-1.2.2.zip
                    chown ec2-user:ec2-user aws-scripts-mon
                    echo "*/5 * * * * /home/ec2-user/aws-scripts-mon/mon-put-instance-data.pl --disk-space-util --disk-space-used --disk-space-avail --disk-path=/ --from-cron --auto-scaling" >> /var/spool/cron/ec2-user
                    
                    
                    # Script to send disk capacity/utilization info for docker volume (from docker info)
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash
                    set -xeu
                    yum install -y jq bc aws-cli 
                    
                    cat << "EOF" >/home/ec2-user/getdockerdiskcapacity.sh
                    #!/bin/bash
                    ### https://aws.amazon.com/blogs/compute/optimizing-disk-usage-on-amazon-ecs/
                    ### Get docker free data and metadata space and push to CloudWatch metrics
                    ###
                    ### requirements:
                    ###  * must be run from inside an EC2 instance
                    ###  * docker with devicemapper backing storage
                    ###  * aws-cli configured with instance-profile/user with the put-metric-data permissions
                    ###  * local user with rights to run docker cli commands
                    ###
                    ### Created by Jay McConnell
                    ### Updated by Richard Zimmermann
                    
                    # install aws-cli, bc and jq if required
                    if [ ! -f /usr/bin/aws ]; then
                      yum -qy -d 0 -e 0 install aws-cli
                    fi
                    if [ ! -f /usr/bin/bc ]; then
                      yum -qy -d 0 -e 0 install bc
                    fi
                    if [ ! -f /usr/bin/jq ]; then
                      yum -qy -d 0 -e 0 install jq
                    fi
                    
                    # Collect region and instanceid from metadata
                    AWSREGION=`curl -ss http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`
                    AWSINSTANCEID=`curl -ss http://169.254.169.254/latest/meta-data/instance-id`
                    
                    function convertUnits {
                      # convert units back to bytes as both docker api and cli only provide freindly units
                      if [ "$1" == "b" ] ; then
                        echo $2
                      elif [ "$1" == "kb" ] ; then
                        awk 'BEGIN{ printf "%.0f\n", '$2' * 1000 }'
                      elif [ "$1" == "mb" ] ; then
                        awk 'BEGIN{ printf "%.0f\n", '$2' * 1000**2 }'
                      elif [ "$1" == "gb" ] ; then
                        awk 'BEGIN{ printf "%.0f\n", '$2' * 1000**3 }'
                      elif [ "$1" == "tb" ] ; then
                        awk 'BEGIN{ printf "%.0f\n", '$2' * 1000**4 }'
                      else
                        echo "Unknown unit $1"
                        exit 1
                      fi
                    }
                    
                    # get used space from docker info
                    function getSpaceUsed {
                      # Get freespace and split unit
                      if [ "$1" == "Data" ] || [ "$1" == "Metadata" ] ; then
                        # this part seems not to work for me
                        # docker info | awk '/'$1' Space Used/ {print tolower($5), $4}'
                        data=$(docker info | awk '/'$1' Space Used/ {print tolower($4)}' | grep -Eo '[[:alpha:]]+|[0-9.]+')
                        data=$(echo $data | awk '{print $2, $1}')
                        echo $data
                      else
                        echo "Metric must be either 'Data' or 'Metadata'"
                        exit 1
                      fi
                    }
                    
                    # get total space from docker info
                    function getSpaceTotal {
                      # Get freespace and split unit
                      if [ "$1" == "Data" ] || [ "$1" == "Metadata" ] ; then
                        # this part seems not to work for me
                        # docker info | awk '/'$1' Space Total/ {print tolower($5), $4}'
                        data=$(docker info | awk '/'$1' Space Total/ {print tolower($4)}' | grep -Eo '[[:alpha:]]+|[0-9.]+')
                        data=$(echo $data | awk '{print $2, $1}')
                        echo $data
                      else
                        echo "Metric must be either 'Data' or 'Metadata'"
                        exit 1
                      fi
                    }
                    
                    used=$(convertUnits `getSpaceUsed Data`)
                    total=$(convertUnits `getSpaceTotal Data`)
                    percent=$(echo $total $used | awk '{printf "%.2f\n", 100/$1*$2}')
                    aws cloudwatch put-metric-data --value $used --namespace ECS --dimensions InstanceID=$AWSINSTANCEID,ClusterName=${Cluster} --unit Bytes --metric-name DataStorageUsed --region $AWSREGION
                    aws cloudwatch put-metric-data --value $total --namespace ECS --dimensions InstanceID=$AWSINSTANCEID,ClusterName=${Cluster} --unit Bytes --metric-name DataStorageTotal --region $AWSREGION
                    aws cloudwatch put-metric-data --value $percent --namespace ECS --dimensions InstanceID=$AWSINSTANCEID,ClusterName=${Cluster} --unit Percent --metric-name DataStorageUtilization --region $AWSREGION
                    aws cloudwatch put-metric-data --value $used --namespace ECS --dimensions ClusterName=${Cluster} --unit Bytes --metric-name DataStorageUsed --region $AWSREGION
                    aws cloudwatch put-metric-data --value $total --namespace ECS --dimensions ClusterName=${Cluster} --unit Bytes --metric-name DataStorageTotal --region $AWSREGION
                    aws cloudwatch put-metric-data --value $percent --namespace ECS --dimensions ClusterName=${Cluster} --unit Percent --metric-name DataStorageUtilization --region $AWSREGION
                    
                    used=$(convertUnits `getSpaceUsed Metadata`)
                    total=$(convertUnits `getSpaceTotal Metadata`)
                    percent=$(echo $total $used | awk '{printf "%.2f\n", 100/$1*$2}')
                    aws cloudwatch put-metric-data --value $used --namespace ECS --dimensions InstanceID=$AWSINSTANCEID,ClusterName=${Cluster} --unit Bytes --metric-name MetadataStorageUsed --region $AWSREGION
                    aws cloudwatch put-metric-data --value $total --namespace ECS --dimensions InstanceID=$AWSINSTANCEID,ClusterName=${Cluster} --unit Bytes --metric-name MetadataStorageTotal --region $AWSREGION
                    aws cloudwatch put-metric-data --value $percent --namespace ECS --dimensions InstanceID=$AWSINSTANCEID,ClusterName=${Cluster} --unit Percent --metric-name MetadataStorageUtilization --region $AWSREGION
                    aws cloudwatch put-metric-data --value $used --namespace ECS --dimensions ClusterName=${Cluster} --unit Bytes --metric-name MetadataStorageUsed --region $AWSREGION
                    aws cloudwatch put-metric-data --value $total --namespace ECS --dimensions ClusterName=${Cluster} --unit Bytes --metric-name MetadataStorageTotal --region $AWSREGION
                    aws cloudwatch put-metric-data --value $percent --namespace ECS --dimensions ClusterName=${Cluster} --unit Percent --metric-name MetadataStorageUtilization --region $AWSREGION
                    EOF
                    
                    chown ec2-user:ec2-user /home/ec2-user/getdockerdiskcapacity.sh
                    chmod 0755 /home/ec2-user/getdockerdiskcapacity.sh
                    echo "*/5 * * * * /home/ec2-user/getdockerdiskcapacity.sh" >> /var/spool/cron/ec2-user
                    
                    
                    # Restart service ECS
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash
                    set -xeu
                    restart ecs || start ecs
                    
                    
                    # Update iptables and restrict access for docker container to instance metadata
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash
                    set -xeu
                    sudo iptables --insert DOCKER-ISOLATION 1 --destination 169.254.169.254/32 --in-interface docker+ --jump REJECT --reject-with icmp-port-unreachable
                    sudo service iptables save
                    
                    
                    # Ensure that ECS is running and update CloudFormation
                    --==BOUNDARY==
                    MIME-Version: 1.0
                    Content-Type: text/x-shellscript; charset="us-ascii"
                    #!/bin/bash -xe
                    set -xeu
          
                    LC=ECSLaunchConfiguration
                    ASG=EcsAutoScalingGroup
                    
                    function error_exit()
                    {
                        /opt/aws/bin/cfn-signal \
                        --success false \
                        --reason 1 \
                        --region ${AWS::Region} \
                        --stack ${AWS::StackName} \
                        --resource $ASG
                        exit 1
                    }
                    trap error_exit ERR
                    
                    # Make sure ecs-agent is running
                    ECSMETA=""; while [[ -z "$ECSMETA" ]] ; do ECSMETA="$(/usr/bin/curl -s http://localhost:51678/v1/metadata || echo '')"; /bin/sleep 1 ; done
                    
                    mkdir -p /etc/cfn/hooks.d
                    cat > /etc/cfn/cfn-hup.conf <<- EOF
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
                    interval=1
                    verbose=true
                    EOF
                    chmod 0400 /etc/cfn/cfn-hup.conf
                    
                    cat > /etc/cfn/hooks.d/cfn-auto-reloader.conf <<- EOF
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.$LC.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack=${AWS::StackName} --resource=$LC --region=${AWS::Region} --configsets=update
                    runas=root
                    EOF
                    chmod 0400 /etc/cfn/hooks.d/cfn-auto-reloader.conf
                    
                    /opt/aws/bin/cfn-init -v --stack=${AWS::StackName} --resource=$LC --region=${AWS::Region} --configsets=install
                    service cfn-hup start
                    
                    # Wait until all tasks are running before signaling cfn
                    SERVICES=$(aws --region ${AWS::Region} ecs list-services --cluster ${Cluster} --query 'serviceArns[*]' --output text)
                    for i in $SERVICES ; do
                    SERVICE=$(echo "$i" | sed "s/arn.*\///")
                    DELTA=1
                    while [[ $DELTA -gt 0 ]] ; do
                    echo "Getting DELTA for $SERVICE"
                    read -r desired running <<<$(aws --region ${AWS::Region} ecs describe-services --cluster ${Cluster} --services $SERVICE --query '[services[?status==`ACTIVE`].desiredCount,services[?status==`ACTIVE`].runningCount]' --output text)
                    if [[ -z $desired || -z $running ]] ; then
                    echo "Got empty desired/running, disabled service?"
                    continue
                    fi
                    if [[ $desired -eq 0 || $running -eq 0 ]] ; then
                        echo "Desired: $desired, running: $running. Ignoring service $SERVICE."
                        continue
                    fi
                    DELTA=$(($desired-$running))
                    echo "Got delta $DELTA"
                    [[ $DELTA -gt 0 ]] && sleep 10
                    done
                    done
                    
                    /opt/aws/bin/cfn-signal -e 0 --stack=${AWS::StackName} --resource=$ASG --region=${AWS::Region} || true
               
                    # LAUNCHCONFIGURATIONUSERDATAEND                 
  
    # CLOUDWATCH LOG GROUPS
    LogGroup1:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}
            RetentionInDays: 60
      
    LogGroup2:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/messages
            RetentionInDays: 60    
  
    LogGroup3:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/dmesg
            RetentionInDays: 60        
    
    LogGroup4:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/docker
            RetentionInDays: 60        
    
    LogGroup5:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/ecs/ecs-init.log
            RetentionInDays: 60        
    
    LogGroup6:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/ecs/ecs-agent.log
            RetentionInDays: 60        
    
    LogGroup7:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/ecs/audit.log
            RetentionInDays: 60        
    
    LogGroup8:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/cloud-init.log
            RetentionInDays: 60        
    
    LogGroup9:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/cloud-init-output.log
            RetentionInDays: 60       
    
    LogGroup10:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /ecs/${StackPrefix}/var/log/cfn-init-cmd.log
            RetentionInDays: 60       

#################################################################################            
    # CLOUDWATCH ALARMS - SCALE OUT EVENTS
    EcsCpuReservationAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            ActionsEnabled: true
            AlarmActions:
            - !Ref EcsScaleOutPolicy
            - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Scale out if CPU reservation of autoscaling group 
                              is > 90% for 2 minutes
            ComparisonOperator: GreaterThanThreshold
            TreatMissingData: notBreaching
            MetricName: CPUReservation
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 90
            EvaluationPeriods: 2
            Period: 60
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster
    
    EcsMemoryReservationAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmActions:
            - !Ref EcsScaleOutPolicy
            - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Scale out if memory reservation of autoscaling group 
                              is > 90% for 2 minutes
            ComparisonOperator: GreaterThanThreshold
            TreatMissingData: notBreaching
            MetricName: MemoryReservation
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 90
            EvaluationPeriods: 2
            Period: 60
            Dimensions:
            - Name: ClusterName
              Value: !Ref Cluster

    ECSFullDisk:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if disk capacity is over 80%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: DiskSpaceUtilization
            Namespace: System/Linux
            Statistic: Average
            Threshold: 80.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: MountPath
                Value: "/"
              - Name: AutoScalingGroupName
                Value: !Ref EcsAutoScalingGroup
              - Name: Filesystem
                Value: /dev/xvda1

    ECSContainerFullDisk:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if disk capacity is over 80%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: DataStorageUtilization
            Namespace: ECS
            Statistic: Average
            Threshold: 80.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref Cluster

    ECSHighMemory:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if memory usage is over 80%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: MemoryUtilization
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 80.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref Cluster

    ECSHighCPU:
        Type: "AWS::CloudWatch::Alarm"
        Properties:
            ActionsEnabled: true
            AlarmActions:
              - !Ref EcsScaleOutPolicy
              - !Ref EcsAutoScalingSnsTopic
            AlarmDescription: Add new instance if CPU utilization is over 60%
            ComparisonOperator: GreaterThanOrEqualToThreshold
            TreatMissingData: notBreaching
            MetricName: CPUUtilization
            Namespace: AWS/ECS
            Statistic: Average
            Threshold: 60.0
            EvaluationPeriods: 2
            Period: 300
            Dimensions:
              - Name: ClusterName
                Value: !Ref Cluster

    # CLOUDWATCH ALARMS - SCALE IN EVENTS
#    EcsCpuReservationAlarmLow:
#        Type: AWS::CloudWatch::Alarm
#        Properties:
#            ActionsEnabled: true
#            OKActions:
#            - !Ref EcsScaleInPolicy
#            - !Ref EcsAutoScalingSnsTopic
#            AlarmDescription: Scale in if CPU reservation of autoscaling group 
#                              is < 25% for 2 minutes
#            ComparisonOperator: GreaterThanThreshold
#            TreatMissingData: notBreaching
#            MetricName: CPUReservation
#            Namespace: AWS/ECS
#            Statistic: Average
#            Threshold: 25
#            EvaluationPeriods: 2
#            Period: 60
#            Dimensions:
#            - Name: ClusterName
#              Value: !Ref Cluster
#    
#    EcsMemoryReservationAlarmLow:
#        Type: AWS::CloudWatch::Alarm
#        Properties:
#            OKActions:
#            - !Ref EcsScaleInPolicy
#            - !Ref EcsAutoScalingSnsTopic
#            AlarmDescription: Scale in if memory reservation of autoscaling group 
#                              is < 25% for 2 minutes
#            ComparisonOperator: GreaterThanThreshold
#            TreatMissingData: notBreaching
#            MetricName: MemoryReservation
#            Namespace: AWS/ECS
#            Statistic: Average
#            Threshold: 25
#            EvaluationPeriods: 2
#            Period: 60
#            Dimensions:
#            - Name: ClusterName
#              Value: !Ref Cluster
#
#    ECSEmptyDisk:
#        Type: "AWS::CloudWatch::Alarm"
#        Properties:
#            ActionsEnabled: true
#            OKActions:
#              - !Ref EcsScaleInPolicy
#              - !Ref EcsAutoScalingSnsTopic
#            AlarmDescription: Remove instance if disk capacity is under 25%
#            ComparisonOperator: GreaterThanOrEqualToThreshold
#            TreatMissingData: notBreaching
#            MetricName: DiskSpaceUtilization
#            Namespace: System/Linux
#            Statistic: Average
#            Threshold: 25.0
#            EvaluationPeriods: 2
#            Period: 300
#            Dimensions:
#              - Name: MountPath
#                Value: "/"
#              - Name: AutoScalingGroupName
#                Value: !Ref EcsAutoScalingGroup
#              - Name: Filesystem
#                Value: /dev/xvda1
#
#    ECSContainerEmptyDisk:
#        Type: "AWS::CloudWatch::Alarm"
#        Properties:
#            ActionsEnabled: true
#            OKActions:
#              - !Ref EcsScaleInPolicy
#              - !Ref EcsAutoScalingSnsTopic
#            AlarmDescription: Remove instance if disk capacity is under 25%
#            ComparisonOperator: GreaterThanOrEqualToThreshold
#            TreatMissingData: notBreaching
#            MetricName: DataStorageUtilization
#            Namespace: ECS
#            Statistic: Average
#            Threshold: 25.0
#            EvaluationPeriods: 2
#            Period: 300
#            Dimensions:
#              - Name: ClusterName
#                Value: !Ref Cluster
#
#    ECSLowMemory:
#        Type: "AWS::CloudWatch::Alarm"
#        Properties:
#            ActionsEnabled: true
#            OKActions:
#              - !Ref EcsScaleInPolicy
#              - !Ref EcsAutoScalingSnsTopic
#            AlarmDescription: Remove instance if memory usage is under 25%
#            ComparisonOperator: GreaterThanOrEqualToThreshold
#            TreatMissingData: notBreaching
#            MetricName: MemoryUtilization
#            Namespace: AWS/ECS
#            Statistic: Average
#            Threshold: 25.0
#            EvaluationPeriods: 2
#            Period: 300
#            Dimensions:
#              - Name: ClusterName
#                Value: !Ref Cluster
#
#    ECSLowCPU:
#        Type: "AWS::CloudWatch::Alarm"
#        Properties:
#            ActionsEnabled: true
#            OKActions:
#              - !Ref EcsScaleInPolicy
#              - !Ref EcsAutoScalingSnsTopic
#            AlarmDescription: Remove instance if CPU utilization is under 20%
#            ComparisonOperator: GreaterThanOrEqualToThreshold
#            TreatMissingData: notBreaching
#            MetricName: CPUUtilization
#            Namespace: AWS/ECS
#            Statistic: Average
#            Threshold: 20.0
#            EvaluationPeriods: 2
#            Period: 300
#            Dimensions:
#              - Name: ClusterName
#                Value: !Ref Cluster



