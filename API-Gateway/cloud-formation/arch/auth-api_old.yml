---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway by Wolfgang Unger'


Resources:
 ############ Lambdas ###############
  HelloLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
            ZipFile: >
                def lambda_handler(event, context):
                return 'Hello from Lambda'
      Description: A hello function
      FunctionName: HelloLambda
      Handler: index.lambda_handler
      Role:
        'Fn::GetAtt':
          - LambdaExecutionRole
          - Arn
      Runtime: python2.7
      
  PreSigninLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
            ZipFile: >
                import base64
                
                def lambda_handler(event, context):
                    event['response'] = {
                    "autoConfirmUser": True
                    }
                    return event
      Description: preSignin for Cognito
      FunctionName: PreSigninLambda
      Handler: index.lambda_handler
      Role:
        'Fn::GetAtt':
          - LambdaExecutionRole
          - Arn
      Runtime: python2.7      

  LoginLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
            ZipFile: >
                from __future__ import print_function
                import boto3
                import botocore.exceptions
                import hmac
                import hashlib
                import base64
                import json
                import uuid
                # MODIFY
                USER_POOL_ID = 'eu-central-1_C9SO0LAIk'
                CLIENT_ID = '7liqjgpl553nmnd7a7v2dpf0b8'
                CLIENT_SECRET = '4h34an7msd7d6h0o45pmf57qnqrc71at3a0ke2kkia6he14784m'
                #
                client = None
                #
                def get_secret_hash(username):
                    msg = username + CLIENT_ID
                    dig = hmac.new(str(CLIENT_SECRET).encode('utf-8'), 
                    msg = str(msg).encode('utf-8'), digestmod=hashlib.sha256).digest()
                    d2 = base64.b64encode(dig).decode()
                    return d2
                    #
                ERROR = 0
                SUCCESS = 1
                USER_EXISTS = 2
                #    
                def initiate_auth(username, password):
                    try:
                        resp = client.admin_initiate_auth(
                        UserPoolId=USER_POOL_ID,
                        ClientId=CLIENT_ID,
                        AuthFlow='ADMIN_NO_SRP_AUTH',
                        AuthParameters={
                            'USERNAME': username,
                            'SECRET_HASH': get_secret_hash(username),
                            'PASSWORD': password
                            },
                        ClientMetadata={
                            'username': username,
                            'password': password
                            })
                    except client.exceptions.NotAuthorizedException as e:
                        return None, "The username or password is incorrect"
                    except Exception as e:
                        print(e)
                        return None, "Unknown error"
                    return resp, None
                #
                def lambda_handler(event, context):
                    global client
                    if client == None:
                    client = boto3.client('cognito-idp')
                    print(event)
                    body = event
                    username = body['username']
                    password = body['password']
                    is_new = "false"
                    user_id = str(uuid.uuid4())
                    resp, msg = initiate_auth(username, password)
                    if msg != None:
                        return {'status': 'fail', 'msg': msg}
                    id_token = resp['AuthenticationResult']['IdToken']
                    print('id token: ' + id_token)
                    return {'status': 'success', 'id_token': id_token, 'user_id': user_id, 'is_new': is_new}
      Description: login function for cognito ; returning the access token
      FunctionName: LoginLambda
      Handler: index.lambda_handler
      Role:
        'Fn::GetAtt':
          - LambdaExecutionRole
          - Arn
      Runtime: python2.7
      
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  
  ############## API ##########
  CognitoAuthApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Cognito Auth API
      Description: API used for cognito auth requests
      FailOnWarnings: true
  
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - HelloLambda
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: CognitoAuthApi
            - /*
  
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: '*'
  
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn:
        'Fn::GetAtt':
          - ApiGatewayCloudWatchLogsRole
          - Arn
  
  CognitoAuthApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId:
        Ref: CognitoAuthApi
      StageName: LATEST
      Variables:
        Tom: Maslen-v4
  
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - HelloRequestGET
      - LoginRequestPOST
    Properties:
      RestApiId:
        Ref: CognitoAuthApi
      StageName: DummyStage
  
  HelloResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: CognitoAuthApi
      ParentId:
        'Fn::GetAtt':
          - CognitoAuthApi
          - RootResourceId
      PathPart: hello

  LoginResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: CognitoAuthApi
      ParentId:
        'Fn::GetAtt':
          - CognitoAuthApi
          - RootResourceId
      PathPart: login

  PreSigninResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Ref: CognitoAuthApi
      ParentId:
        'Fn::GetAtt':
          - CognitoAuthApi
          - RootResourceId
      PathPart: preSignin
      
  HelloRequestGET:
    DependsOn: LambdaPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - HelloLambda
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
        RequestTemplates:
          application/json:
            'Fn::Join':
              - ''
              - - |
                  #set($allParams = $input.params())
                - |
                  {
                - |2
                    "body-json": "$input.json('$')",
                - |2
                    "params" : {
                - |2
                      #foreach($type in $allParams.keySet())
                - |2
                        #set($params = $allParams.get($type))
                - |2
                        "$type" : {
                - |2
                          #foreach($paramName in $params.keySet())
                - |2
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                - |2
                            #if($foreach.hasNext),#end
                - |2
                          #end
                - |2
                        }
                - |2
                      #if($foreach.hasNext),#end
                - |2
                      #end
                - |2
                    },
                - |2
                    "stage-variables": {
                - |2
                      #foreach($key in $stageVariables.keySet())
                - |2
                        "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                - |2
                        #if($foreach.hasNext),#end
                - |2
                      #end
                - |2
                    },
                - |2
                    "context" : {
                - |2
                      "account-id" : "$context.identity.accountId",
                - |2
                      "api-id" : "$context.apiId",
                - |2
                      "api-key" : "$context.identity.apiKey",
                - |2
                      "authorizer-principal-id" : "$context.authorizer.principalId",
                - |2
                      "caller" : "$context.identity.caller",
                - |2
                      "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                - |2
                      "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                - |2
                      "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                - |2
                      "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                - |2
                      "http-method" : "$context.httpMethod",
                - |2
                      "stage" : "$context.stage",
                - |2
                      "source-ip" : "$context.identity.sourceIp",
                - |2
                      "user" : "$context.identity.user",
                - |2
                      "user-agent" : "$context.identity.userAgent",
                - |2
                      "user-arn" : "$context.identity.userArn",
                - |2
                      "request-id" : "$context.requestId",
                - |2
                      "resource-id" : "$context.resourceId",
                - |2
                      "resource-path" : "$context.resourcePath"
                - |2
                    }
                - '}'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId:
        Ref: HelloResource
      RestApiId:
        Ref: CognitoAuthApi
      MethodResponses:
        - StatusCode: 200
  
  LoginRequestPOST:
    DependsOn: LambdaPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - HelloLambda
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')

      RequestParameters:
        method.request.querystring.name: false
      ResourceId:
        Ref: LoginResource
      RestApiId:
        Ref: CognitoAuthApi
      MethodResponses:
        - StatusCode: 200

  PreSigninRequestPOST:
    DependsOn: LambdaPermission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          'Fn::Join':
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - 'Fn::GetAtt':
                  - PreSigninLambda
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
        RequestTemplates:
          application/json:
            'Fn::Join':
              - ''
              - - |
                  #set($allParams = $input.params())
                - |
                  {
                - |2
                    "body-json": "$input.json('$')",
                - |2
                    "params" : {
                - |2
                      #foreach($type in $allParams.keySet())
                - |2
                        #set($params = $allParams.get($type))
                - |2
                        "$type" : {
                - |2
                          #foreach($paramName in $params.keySet())
                - |2
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                - |2
                            #if($foreach.hasNext),#end
                - |2
                          #end
                - |2
                        }
                - |2
                      #if($foreach.hasNext),#end
                - |2
                      #end
                - |2
                    },
                - |2
                    "stage-variables": {
                - |2
                      #foreach($key in $stageVariables.keySet())
                - |2
                        "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                - |2
                        #if($foreach.hasNext),#end
                - |2
                      #end
                - |2
                    },
                - |2
                    "context" : {
                - |2
                      "account-id" : "$context.identity.accountId",
                - |2
                      "api-id" : "$context.apiId",
                - |2
                      "api-key" : "$context.identity.apiKey",
                - |2
                      "authorizer-principal-id" : "$context.authorizer.principalId",
                - |2
                      "caller" : "$context.identity.caller",
                - |2
                      "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                - |2
                      "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                - |2
                      "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                - |2
                      "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                - |2
                      "http-method" : "$context.httpMethod",
                - |2
                      "stage" : "$context.stage",
                - |2
                      "source-ip" : "$context.identity.sourceIp",
                - |2
                      "user" : "$context.identity.user",
                - |2
                      "user-agent" : "$context.identity.userAgent",
                - |2
                      "user-arn" : "$context.identity.userArn",
                - |2
                      "request-id" : "$context.requestId",
                - |2
                      "resource-id" : "$context.resourceId",
                - |2
                      "resource-path" : "$context.resourcePath"
                - |2
                    }
                - '}'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId:
        Ref: PreSigninResource
      RestApiId:
        Ref: CognitoAuthApi
      MethodResponses:
        - StatusCode: 200        
############################################        
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      'Fn::Join':
        - ''
        - - 'https://'
          - Ref: CognitoAuthApi
          - .execute-api.
          - Ref: 'AWS::Region'
          - .amazonaws.com
