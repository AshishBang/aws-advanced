######################################################################################
#  Description
######################################################################################

Description: >
    docker ecs test - dynamic image select by param
#  by wolfgang unger 13 .3.2018
######################################################################################
#  Parameters
######################################################################################

Parameters: 

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: docker-test

    ParentVPCStack:
        Description: Please enter the Parent VPC Stack (do not change)
        Type: String
        Default: UngerwVPC

    ParentECSStack:
        Description: Please enter the Parent ECS Stack (do not change)
        Type: String
        Default: UngerwECS
        
    ParentECSRepo:
        Description: Please enter the Parent ECS Repo 
        #Type: String
        Type: AWS::ECR::Repository::Id
        #Default: 'Fn::ImportValue': !Sub '${ECSRepo}'
        #Default:   ECSRepo  
        
    ImageName:
        Description: Name of the image to run on the ECS hosts
        Type: String
        Default: tomcat.8.0

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 2

######################################################################################
#  Metadata
######################################################################################
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Base Service Configuration"
        Parameters: 
          - EnvironmentName
          - ParentVPCStack
          - ParentECSStack
      - 
        Label: 
          default: "Scaling Configuration"
        Parameters: 
          - DesiredCount
          - MaxCount

######################################################################################
#  Resources
######################################################################################

Resources:

    ######################################################################################
    #  ECS Service and Task Definition
    ######################################################################################

    Service: 
        Type: AWS::ECS::Service
        DependsOn: LoadBalancerListener
        Properties: 
            Cluster:
                'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
            #Role: !Ref ServiceRole # not necessary gets service linked-service role https://blog.devopspro.co.uk/deploying-fargate-services-using-cloudformation-the-guide-i-wish-i-had-d89b6dc62303
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            PlacementStrategies: 
                - Type: spread
                  Field: attribute:ecs.availability-zone
                - Type: spread
                  Field: instanceId
            NetworkConfiguration: 
                AwsvpcConfiguration:
                    SecurityGroups: 
                    - !Ref ContainerSecurityGroup
                    Subnets: !Split
                    - ','
                    - 'Fn::ImportValue':
                        !Sub '${ParentVPCStack}-PrivateSubnets'
            HealthCheckGracePeriodSeconds: 60
            LoadBalancers: 
                - ContainerName: "docker-test"
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup
       

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: docker-test
            NetworkMode: awsvpc
            #NetworkMode: bridge
            # ExecutionRoleArn: todo # Role of ECS Cluster for excuting the services
            # TaskRoleArn: todo # Role for granting access for services like S3, DynamoDB...
            ContainerDefinitions:
                - Name: docker-test
                  Essential: true
                  #Image: 016973021151.dkr.ecr.eu-west-2.amazonaws.com/ecs-repository:tomcat.8.0
                  #Image: !Sub '${ParentECSRepo}:${ImageName}'
                  Image: !GetAtt !Ref ParentECSRepo.Arn !Sub ':${ImageName}'
                  
                  Memory: 128
                  PortMappings:
                    - ContainerPort: 8080
                      HostPort: 8080
                      Protocol: tcp
                    - ContainerPort: 80
                      HostPort: 80
                      Protocol: tcp                    
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 1  

    ######################################################################################
    #  Loadbalancing
    ######################################################################################

    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub LB-${AWS::StackName}
            Type: application
            Scheme: internet-facing
            Subnets: !Split
              - ','
              - 'Fn::ImportValue':
                    !Sub '${ParentVPCStack}-PublicSubnets' # <- Change for private or public services
            SecurityGroups: 
                - !Ref LoadBalancerSecurityGroup
            Tags: 
                - Key: Name
                  Value: !Sub LB-${AWS::StackName}

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: 8080
            Protocol: HTTP 
            DefaultActions: 
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId:
                'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'       
            Port: 8080
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            TargetType: ip
    
    ######################################################################################
    #  Security Groups
    ######################################################################################
    # This security group defines who/where is allowed to access the Application Load Balancer.
    # By default, we've opened this up to the public internet (0.0.0.0/0) but can you restrict
    # it further if you want.
    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: 
              'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
            GroupDescription: Access to the load balancer that sits in front of ECS
            SecurityGroupIngress:
                # Allow access from anywhere to our ECS services
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
            Tags: 
                - Key: Name
                  Value: !Sub ${EnvironmentName}-LoadBalancers
    
    ContainerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Access to the containers
            VpcId: 
              'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

    ContainerSecurityGroupIngressFromPublicALB:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from the public ALB
            GroupId: !Ref 'ContainerSecurityGroup'
            IpProtocol: -1
            SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'

    ######################################################################################
    #  IAM Roles
    ######################################################################################
    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html

    ServiceRole: 
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AttachNetworkInterface",
                                    "ec2:CreateNetworkInterface",
                                    "ec2:CreateNetworkInterfacePermission",
                                    "ec2:DeleteNetworkInterface",
                                    "ec2:DeleteNetworkInterfacePermission",
                                    "ec2:Describe*",
                                    "ec2:DetachNetworkInterface",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets",
                                    "servicediscovery:DeregisterInstance",
                                    "servicediscovery:Get*",
                                    "servicediscovery:List*",
                                    "servicediscovery:RegisterInstance"
                                ],
                                "Resource": "*"
                        }]
                    }

    ######################################################################################
    #  Autoscaling
    ######################################################################################
    ServiceScaleRole: # todo: check if permission are least privilege
        Type: 'AWS::IAM::Role'
        Properties:
            ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
            AssumeRolePolicyDocument:
                Version: '2008-10-17'
                Statement:
                    Action: 'sts:AssumeRole'
                    Effect: Allow
                    Principal:
                        Service: 'ecs.amazonaws.com'
    
    ServiceScalableTarget:
        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
        DependsOn: Service
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Sub
                - 'service/${Cluster}/${Service}'
                - Cluster:
                    'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
                  Service: !GetAtt 'Service.Name'
            RoleARN: !GetAtt 'ServiceScaleRole.Arn'
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalLowerBound: 0
                  ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
        Properties:
            PolicyName: ServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                - MetricIntervalUpperBound: 0
                  ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization greater than 90%
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: 
                'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '3'
            Threshold: '90'
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
            - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: CPU utilization less than 70%
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
            - Name: ClusterName
              Value: 
                'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
            - Name: ServiceName
              Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: '60'
            EvaluationPeriods: '10'
            Threshold: '70'
            ComparisonOperator: LessThanThreshold
            AlarmActions:
            - !Ref ServiceScaleInPolicy

#####################################################################################
#  Outputs
######################################################################################

Outputs:

    LoadBalancer:
        Description: A reference to the Application Load Balancer
        Value: !Ref LoadBalancer
        Export:
            Name: !Sub LB-${AWS::StackName}

    LoadBalancerUrl:
        Description: The URL of the ALB
        Value: !GetAtt LoadBalancer.DNSName
        Export:
            Name: !Sub LB-URL-${AWS::StackName}

    Listener:
        Description: A reference to a port 80 listener
        Value: !Ref LoadBalancerListener  
        Export:
            Name: !Sub LB-Listener-${AWS::StackName}
    